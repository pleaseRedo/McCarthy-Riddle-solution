
/* jy447  Jialin
THIS WORK IS ENTIRELY MY OWN.
The program does not produce multiple answers.
I have not used built-ins.
1. 1747
Baes conditions: 1< X < Y <, S is X + Y, S < 100, P is X * Y (multiplication).
After (a) is announced, the statement of mathematician P implies that P(product) could not be a product of two distinct prime numbers,
otherwise P could deduce X and Y. For instance, if X, Y is 3 and 5 then their product’s factorization
can only be expressed by 3 and 5(15 = 3 x 5), which means P would deduce them.
In other words, the product which occurrence is 1 throughout the whole quad list is not eligible.
So the purpose of s1 is to generate a list of quads in the form [X, Y, S, P] under base conditions
and remove the quad with the unique the product.

2. 145
After (b) is announced, the statement of mathematician S implies that,
the summands of X and Y is ineligible if their product P is unique (s1 ineligible product).
The reason is that if there is a summand of X and Y such that their product is unique,
then P would deduce the numbers so dose S, but P can not deduce X and Y,
so there is no such X Y pair and their sum is ineligible. For instance, X + Y could not be 66 since 13 * 53 = 689 is a unique product
. So assume S were given 66 and P given 689, P would know the numbers and would announce “I Know the two numbers”,
then S would immediately deduce these two numbers as well because 66 could be 53 + 13. So,
the purpose of s2 is to remove the quads which sum corresponding to unique product from the list we obtained from s1.

3. 86
After (c) is announced, the statement of mathematician P implies that
P now knows that X + Y is one of the values from the list we obtained
from s2 and the product of these two numbers must be unique at this time.
So the purpose of s3 is to remove the non-unique product from the list.

4. 1
After (d) is announced, the statement of mathematician S implies that S now knows the two numbers and their sum is unique
from the list we obtained from s3. So the purpose of s4 is to remove the non-unique sum
from the list and the rest are the answers.

5. 1
s4(Q,500) uses 72301265 inferences. */


%Generate unsorted quads under the base conditions.
genQuad(X,Y,N,[[X,Y,S,P]]) :- Y is (N/2) + 1,X is (N/2) - 1,S is X+Y,P is X * Y, S =< N, Y > X.
genQuad(X,Y,N,[[X,Y,S,P]|T]) :- N is X + Y ,X1 is X + 1,Y1 is X1 + 1,S is X + Y,P is X * Y,S =< N, Y > X,genQuad(X1,Y1,N,T).
genQuad(X,Y,N,[[X,Y,S,P]|T]) :- Y1 is Y + 1, S is X + Y,P is X * Y,S =< N, Y > X,genQuad(X,Y1,N,T).


%Remove the specified element from a list,first used after (b) announced.
remove([],_,_).
remove(L1,L2,R) :- remove1(L1,L2,L2,R).
remove1([],_,_,R) :- R = [].
remove1([[_,_,S,_]|L1],[S|_],G,R) :- remove1(L1,G,G,R).
remove1(E,[_|L],G,R) :- remove1(E,L,G,R).
remove1([[X1,Y1,S1,P1]|L],[],G,[[X1,Y1,S1,P1]|R]) :- remove1(L,G,G,R).

%Keep the specified elements(Sum) and removed the rest from a list.
keepSum([],_,_).
keepSum(L1,L2,R) :- keep(L1,L2,L2,R).
keep([],_,_,R) :- R = [].
keep([[X1,Y1,S,P1]|L1],[S|_],G,[[X1,Y1,S,P1]|R]) :- keep(L1,G,G,R).
keep(L1,[_|L2],G,R) :- keep(L1,L2,G,R).
keep([_|L],[],G,R) :- keep(L,G,G,R).



%Remove the unique product from a list,first used after (a) announced.
removeP([],[],[]).
removeP([],[_],[]).
removeP([[X1,Y1,S1,P],[X2,Y2,S2,P],[X3,Y3,S3,P3]|T],[[X1,Y1,S1,P],[X2,Y2,S2,P]|L],Z) :- P3 \= P ,removeP([[X3,Y3,S3,P3]|T],L,Z).
removeP([[X1,Y1,S1,P],[X2,Y2,S2,P]|T],[[X1,Y1,S1,P],[X2,Y2,S2,P]|L],Z):- removeP([[X2,Y2,S2,P]|T],[[X2,Y2,S2,P]|L],Z).
removeP([[X1,Y1,S1,P],[X2,Y2,S2,P]|[]],[[X1,Y1,S1,P],[X2,Y2,S2,P]|[]],_).
removeP([[_,_,S1,_]|T],L,[S1|Z]) :- removeP(T,L,Z).

%Remove the non-unique product from a list, first used after (c) announced.
removeNP([],[]).
removeNP([],[_]).
removeNP([[_,_,_,P],[_,_,_,P],[X3,Y3,S3,P3]|T],L) :- P3 \= P ,removeNP([[X3,Y3,S3,P3]|T],L).
removeNP([[_,_,_,P],[_,_,_,P]|[]],L) :- removeNP([],L).
removeNP([[_,_,_,P],[X2,Y2,S2,P]|T],L):- removeNP([[X2,Y2,S2,P]|T],L).
removeNP([[X1,Y1,S1,P]|T],[[X1,Y1,S1,P]|L]) :- removeNP(T,L).

%Remove the non-unique SUM from a list, first used after (d) announced.
removeNS([],[]).
removeNS([],[_]).
removeNS([[_,_,S,_],[_,_,S,_],[X3,Y3,S3,P3]|T],L) :- S3 \= S ,removeNS([[X3,Y3,S3,P3]|T],L).
removeNS([[_,_,S,_],[_,_,S,_]|[]],L) :- removeNS([],L).
removeNS([[_,_,S,_],[X2,Y2,S,P2]|T],L):- removeNS([[X2,Y2,S,P2]|T],L).
removeNS([[X1,Y1,S,P1]|T],[[X1,Y1,S,P1]|L]) :- removeNS(T,L).

s1(Q,N) :- genQuad(2,3,N,R),merge_sort(R,K),removeP(K,Q,_),!.

s2(Q,N) :- genQuad(2,3,N,R),merge_sort(R,K),removeP(K,U,B),remove(U,B,Q),!.

s3(Q,N) :- genQuad(2,3,N,R),merge_sort(R,K),removeP(K,U,B),remove(U,B,C),removeNP(C,Q),!.

s4(Q,N) :- nextPrime(N,SL),iLimitCheck(N,IL,SL),getRe(11,SL,Q,IL),!.
%The commented s4 uses the traditional way(the way introduced in Lec. Which produced the answer after 308,069 inferences).
%s4(Q,N) :- genQuad(2,3,N,R),merge_sort(R,K),removeP(K,U,B),genPossibleSum(N,C),keepSum(U,C,D),removeNP(D,G),merge_sortSUM(G,E),removeNS(E,Q),!.


/******
*    Title: Prolog merge_sort code
*    Author: Roman Barták
*    Date: March 16, 2016
*    Code version: version 1.0
*    Availability: http://kti.ms.mff.cuni.cz/~bartak/prolog/sorting.html
*******/
% Merge sort, which will sort the product value in ascending order.
divide(L,A,B):-half(L,L,A,B).
half([],R,[],R).   % for lists of even length
half([_],R,[],R).  % for lists of odd length
half([_,_|T],[X|L],[X|L1],R):-half(T,L,L1,R).

merge_sort([],[]).
merge_sort([X],[X]).
merge_sort(List,Sorted):- List = [_,_|_],divide(List,L1,L2),     % list with at least two elements is divided into two parts

	                        merge_sort(L1,Sorted1),merge_sort(L2,Sorted2),  % then each part is sorted
	                        merge(Sorted1,Sorted2,Sorted).                  % and sorted parts are merged
merge([],L,L).
merge(L,[],L):-L\=[].
merge([[X,Y,S,P]|T1],[[X1,Y1,S1,P1]|T2],[[X,Y,S,P]|T]):-P=<P1,merge(T1,[[X1,Y1,S1,P1]|T2],T).
merge([[X,Y,S,P]|T1],[[X1,Y1,S1,P1]|T2],[[X1,Y1,S1,P1]|T]):-P>P1,merge([[X,Y,S,P]|T1],T2,T).

%Same sort as the previous one instead, it sort list by Sum as key.
merge_sortSUM([],[]).
merge_sortSUM([X],[X]).
merge_sortSUM(List,Sorted):- List = [_,_|_],divide(List,L1,L2), merge_sortSUM(L1,Sorted1),merge_sortSUM(L2,Sorted2),
																		mergeSUM(Sorted1,Sorted2,Sorted).
mergeSUM([],L,L).
mergeSUM(L,[],L):-L\=[].
mergeSUM([[X,Y,S,P]|T1],[[X1,Y1,S1,P1]|T2],[[X,Y,S,P]|T]):-S=<S1,mergeSUM(T1,[[X1,Y1,S1,P1]|T2],T).
mergeSUM([[X,Y,S,P]|T1],[[X1,Y1,S1,P1]|T2],[[X1,Y1,S1,P1]|T]):-S>S1,mergeSUM([[X,Y,S,P]|T1],T2,T).



/* Some mathmatical optimise to work out the answer*/
%After stament of (c)
/* afterC(P,Ilimit) will determine the availability of given product.

The product P should be in the form P = X*Y,
and X*Y is the only pair satisfies this relation. By Goldenbach conjecture, even num can be sum
of two primes, so not available.
*/
genEven(X,UpperLimit,_,_,C) :- X >= UpperLimit,!,C is 1,!.
genEven(X,UpperLimit,P,Ilimit,C) :-
											0 is P mod X,
											I is P/X,
											inRange(I,Ilimit),
											Sum is X+I,
											isSumofCom(Sum),!,
											C < 1,  % Count check, if already found one, its false.
											G is C +1,
											Y is X+1,
											genEven(Y,UpperLimit,P,Ilimit,G),!.
genEven(X,N,P,Ilimit,C) :- Y is X+1,genEven(Y,N,P,Ilimit,C),!.
afterC(P,Ilimit) :- Limit is sqrt(P),genEven(2,Limit,P,Ilimit,0).


%If X Y both prime, then their SUM could be deduced,thus not accept.
isSumofComposite(_,X,UpperLimit) :- X > UpperLimit,!.
isSumofComposite(Sum,X,UpperLimit) :- I is Sum - X,!,bothCom(X,I),Y is X+1,isSumofComposite(Sum,Y,UpperLimit),!.
isSumofCom(Sum) :- Half is Sum/2,isSumofComposite(Sum,2,Half).

% Check the input X is a composite number.
% After Statement of (b), The sum of numbers can't be two prime numbers adding together.
composite(_,_,_,1).
composite(X,N,Limit,0) :- N=<Limit,0 is X mod N,composite(X,N,Limit,1),!.
composite(X,N,Limit,0) :- N=<Limit,M is N + 1 ,composite(X,M,Limit,0).
isComposite(2) :- !,2 is 3.
isComposite(X) :- L is sqrt(X),composite(X,2,L,0).

% Input X ,Y should not both be prime, otherwise false.
bothCom(X,_) :- isComposite(X),!.
bothCom(_,Y) :- isComposite(Y),!.

% Range check.
inRange(I,N) :- 2 < I, I < N,!.
% Determine The limit of Y.
% This is most confusing part,since I'm not sure how to establish the ralation between S limit and X,Y limit.
% For Example, if 2<X<Y<L, L >437, then,the second answer [4, 61, 65, 244] appears, this is because 65 = 19 + 46, and 19*46 = 2*437.
% So according to the logic of afterC, 65 is not accept because 65 =19+46,4+61, and 19*46 = 2*437 if under the limit.
%And since 437 allowed, there would be more than one occurrence for P =2*437,19*46, so this P is ineligible,which result in 4,61
% become the only possible pair this time(19,46 is eligible).
% Same reason for 990,1265 which will determine the answer's uniqueness of (16, 73) and (16, 111) respectively. However, these
% Observation won't help me figure out how to connect N(maximum sum) and the L.

iLimitCheck(IL,N,D) :-IL/3 > 438, N is D,!.
iLimitCheck(IL,N,D) :-IL < 438, N is D,!.
iLimitCheck(IL,N,_) :-IL/3 < 438, N is IL/3,!.
% Simple way to check a number is prime.
prime(X,N) :- P is X div 2,P =< N,!.
prime(X,N) :- S is X mod N, S>0,M is N+1,prime(X,M),!.
isPrime(X) :- prime(X,2).

% Work out the next prime number of (N/2).
% The reason is any number greater than this prime would be ineligible.
% Otherwise P would instantly know the two numbers. This is the Upperbound of eligible sum.
% e.g. N<100. 54 only accept pair 1 53, but 53 is prime so their is only one possibility for X and Y.
nextPrimeNum(N,I) :- isPrime(N),I is N,!.
nextPrimeNum(N,I) :- M is N + 1, nextPrimeNum(M,I).
nextPrime(N,R) :- M is N div 2, nextPrimeNum(M,R).

findMaxProductUpperBound(X,R) :- R is ((X div 2)+1) * (X div 2).

%After stament of (d)
/* afterD(Sum,,Out,Ilimit) will determine the availability of given sum.
	The given sum of X+Y must to pass the availability check of checkC and isSumofCom.
	pairs (X+Y) of given sum passes availability check with only one time must be the final answer,
	otherwise S and P won't know X Y.
*/
finalCheck(_,X,UpperLimit,_,_) :-  X > UpperLimit,!.
finalCheck(InputSum,X,UpperLimit,Out,Ilimit) :- Y is InputSum - X,Product is X*Y,
																					afterC(Product,Ilimit),
																					!,
																					Out is X, % Count check, if already found sum passes check, false.
																					Next is X + 1,
																					finalCheck(InputSum,Next,UpperLimit,Out,Ilimit),!.
finalCheck(InputSum,X,UpperLimit,Out,Ilimit) :- Next is X +1,finalCheck(InputSum,Next,UpperLimit,Out,Ilimit),!.
afterD(Sum,Out,Ilimit) :- !,isSumofCom(Sum),UpperLimit is Sum/2,finalCheck(Sum,2,UpperLimit,Out,Ilimit).


%Iterate over the sum to its maximum. And the sum pass afterD would be the anser.
getRe(IntS,SBound,[],_) :- IntS > SBound,!.
getRe(IntS,SBound,[[O,Y,IntS,P]|R],Ilimit) :- afterD(IntS,O,Ilimit), Y is IntS - O, P is Y*O,P < SBound*2,Next is IntS +2,
getRe(Next,SBound,R,Ilimit),!.





getRe(IntS,SBound,Result,Ilimit) :- Next is IntS +2,getRe(Next,SBound,Result,Ilimit),!.



/*
?- consult(jy447).
true.
?- time(s1(Q,100)).
% 89,266 inferences,0.024 CPU in 0.028 seconds (85% CPU, 3768088 Lips)
Q = [[2, 6, 8, 12], [3, 4, 7, 12], [2, 9, 11, 18], [3, 6, 9, 18], [2, 10, 12, 20], [4, 5, 9, 20], [2, 12, 14, 24], [3, 8, 11, 24], [4, 6, 10, 24], [2, 14, 16, 28], [4, 7, 11, 28], [2, 15, 17, 30], [3, 10, 13, 30], [5, 6, 11, 30], [2, 16, 18, 32], [4, 8, 12, 32], [2, 18, 20, 36], [3, 12, 15, 36], [4, 9, 13, 36], [2, 20, 22, 40], [4, 10, 14, 40], [5, 8, 13, 40], [2, 21, 23, 42], [3, 14, 17, 42], [6, 7, 13, 42], [2, 22, 24, 44], [4, 11, 15, 44], [3, 15, 18, 45], [5, 9, 14, 45], [2, 24, 26, 48], [3, 16, 19, 48], [4, 12, 16, 48], [6, 8, 14, 48], [2, 25, 27, 50], [5, 10, 15, 50], [2, 26, 28, 52], [4, 13, 17, 52], [2, 27, 29, 54], [3, 18, 21, 54], [6, 9, 15, 54], [2, 28, 30, 56], [4, 14, 18, 56], [7, 8, 15, 56], [2, 30, 32, 60], [3, 20, 23, 60], [4, 15, 19, 60], [5, 12, 17, 60], [6, 10, 16, 60], [3, 21, 24, 63], [7, 9, 16, 63], [2, 32, 34, 64], [4, 16, 20, 64], [2, 33, 35, 66], [3, 22, 25, 66], [6, 11, 17, 66], [2, 34, 36, 68], [4, 17, 21, 68], [2, 35, 37, 70], [5, 14, 19, 70], [7, 10, 17, 70], [2, 36, 38, 72], [3, 24, 27, 72], [4, 18, 22, 72], [6, 12, 18, 72], [8, 9, 17, 72], [3, 25, 28, 75], [5, 15, 20, 75], [2, 38, 40, 76], [4, 19, 23, 76], [2, 39, 41, 78], [3, 26, 29, 78], [6, 13, 19, 78], [2, 40, 42, 80], [4, 20, 24, 80], [5, 16, 21, 80], [8, 10, 18, 80], [2, 42, 44, 84], [3, 28, 31, 84], [4, 21, 25, 84], [6, 14, 20, 84], [7, 12, 19, 84], [2, 44, 46, 88], [4, 22, 26, 88], [8, 11, 19, 88], [2, 45, 47, 90], [3, 30, 33, 90], [5, 18, 23, 90], [6, 15, 21, 90], [9, 10, 19, 90], [2, 46, 48, 92], [4, 23, 27, 92], [2, 48, 50, 96], [3, 32, 35, 96], [4, 24, 28, 96], [6, 16, 22, 96], [8, 12, 20, 96], [2, 49, 51, 98], [7, 14, 21, 98], [3, 33, 36, 99], [9, 11, 20, 99], [2, 50, 52, 100], [4, 25, 29, 100], [5, 20, 25, 100], [2, 51, 53, 102], [3, 34, 37, 102], [6, 17, 23, 102], [2, 52, 54, 104], [4, 26, 30, 104], [8, 13, 21, 104], [3, 35, 38, 105], [5, 21, 26, 105], [7, 15, 22, 105], [2, 54, 56, 108], [3, 36, 39, 108], [4, 27, 31, 108], [6, 18, 24, 108], [9, 12, 21, 108], [2, 55, 57, 110], [5, 22, 27, 110], [10, 11, 21, 110], [2, 56, 58, 112], [4, 28, 32, 112], [7, 16, 23, 112], [8, 14, 22, 112], [2, 57, 59, 114], [3, 38, 41, 114], [6, 19, 25, 114], [2, 58, 60, 116], [4, 29, 33, 116], [3, 39, 42, 117], [9, 13, 22, 117], [2, 60, 62, 120], [3, 40, 43, 120], [4, 30, 34, 120], [5, 24, 29, 120], [6, 20, 26, 120], [8, 15, 23, 120], [10, 12, 22, 120], [2, 62, 64, 124], [4, 31, 35, 124], [2, 63, 65, 126], [3, 42, 45, 126], [6, 21, 27, 126], [7, 18, 25, 126], [9, 14, 23, 126], [2, 64, 66, 128], [4, 32, 36, 128], [8, 16, 24, 128], [2, 65, 67, 130], [5, 26, 31, 130], [10, 13, 23, 130], [2, 66, 68, 132], [3, 44, 47, 132], [4, 33, 37, 132], [6, 22, 28, 132], [11, 12, 23, 132], [3, 45, 48, 135], [5, 27, 32, 135], [9, 15, 24, 135], [2, 68, 70, 136], [4, 34, 38, 136], [8, 17, 25, 136], [2, 69, 71, 138], [3, 46, 49, 138], [6, 23, 29, 138], [2, 70, 72, 140], [4, 35, 39, 140], [5, 28, 33, 140], [7, 20, 27, 140], [10, 14, 24, 140], [2, 72, 74, 144], [3, 48, 51, 144], [4, 36, 40, 144], [6, 24, 30, 144], [8, 18, 26, 144], [9, 16, 25, 144], [3, 49, 52, 147], [7, 21, 28, 147], [2, 74, 76, 148], [4, 37, 41, 148], [2, 75, 77, 150], [3, 50, 53, 150], [5, 30, 35, 150], [6, 25, 31, 150], [10, 15, 25, 150], [2, 76, 78, 152], [4, 38, 42, 152], [8, 19, 27, 152], [3, 51, 54, 153], [9, 17, 26, 153], [2, 77, 79, 154], [7, 22, 29, 154], [11, 14, 25, 154], [2, 78, 80, 156], [3, 52, 55, 156], [4, 39, 43, 156], [6, 26, 32, 156], [12, 13, 25, 156], [2, 80, 82, 160], [4, 40, 44, 160], [5, 32, 37, 160], [8, 20, 28, 160], [10, 16, 26, 160], [2, 81, 83, 162], [3, 54, 57, 162], [6, 27, 33, 162], [9, 18, 27, 162], [2, 82, 84, 164], [4, 41, 45, 164], [3, 55, 58, 165], [5, 33, 38, 165], [11, 15, 26, 165], [2, 84, 86, 168], [3, 56, 59, 168], [4, 42, 46, 168], [6, 28, 34, 168], [7, 24, 31, 168], [8, 21, 29, 168], [12, 14, 26, 168], [2, 85, 87, 170], [5, 34, 39, 170], [10, 17, 27, 170], [3, 57, 60, 171], [9, 19, 28, 171], [2, 86, 88, 172], [4, 43, 47, 172], [2, 87, 89, 174], [3, 58, 61, 174], [6, 29, 35, 174], [5, 35, 40, 175], [7, 25, 32, 175], [2, 88, 90, 176], [4, 44, 48, 176], [8, 22, 30, 176], [11, 16, 27, 176], [2, 90, 92, 180], [3, 60, 63, 180], [4, 45, 49, 180], [5, 36, 41, 180], [6, 30, 36, 180], [9, 20, 29, 180], [10, 18, 28, 180], [12, 15, 27, 180], [2, 91, 93, 182], [7, 26, 33, 182], [13, 14, 27, 182], [2, 92, 94, 184], [4, 46, 50, 184], [8, 23, 31, 184], [2, 93, 95, 186], [3, 62, 65, 186], [6, 31, 37, 186], [2, 94, 96, 188], [4, 47, 51, 188], [3, 63, 66, 189], [7, 27, 34, 189], [9, 21, 30, 189], [2, 95, 97, 190], [5, 38, 43, 190], [10, 19, 29, 190], [2, 96, 98, 192], [3, 64, 67, 192], [4, 48, 52, 192], [6, 32, 38, 192], [8, 24, 32, 192], [12, 16, 28, 192], [3, 65, 68, 195], [5, 39, 44, 195], [13, 15, 28, 195], [2, 98, 100, 196], [4, 49, 53, 196], [7, 28, 35, 196], [3, 66, 69, 198], [6, 33, 39, 198], [9, 22, 31, 198], [11, 18, 29, 198], [4, 50, 54, 200], [5, 40, 45, 200], [8, 25, 33, 200], [10, 20, 30, 200], [3, 68, 71, 204], [4, 51, 55, 204], [6, 34, 40, 204], [12, 17, 29, 204], [3, 69, 72, 207], [9, 23, 32, 207], [4, 52, 56, 208], [8, 26, 34, 208], [13, 16, 29, 208], [3, 70, 73, 210], [5, 42, 47, 210], [6, 35, 41, 210], [7, 30, 37, 210], [10, 21, 31, 210], [14, 15, 29, 210], [3, 72, 75, 216], [4, 54, 58, 216], [6, 36, 42, 216], [8, 27, 35, 216], [9, 24, 33, 216], [12, 18, 30, 216], [4, 55, 59, 220], [5, 44, 49, 220], [10, 22, 32, 220], [11, 20, 31, 220], [3, 74, 77, 222], [6, 37, 43, 222], [4, 56, 60, 224], [7, 32, 39, 224], [8, 28, 36, 224], [14, 16, 30, 224], [3, 75, 78, 225], [5, 45, 50, 225], [9, 25, 34, 225], [3, 76, 79, 228], [4, 57, 61, 228], [6, 38, 44, 228], [12, 19, 31, 228], [5, 46, 51, 230], [10, 23, 33, 230], [3, 77, 80, 231], [7, 33, 40, 231], [11, 21, 32, 231], [4, 58, 62, 232], [8, 29, 37, 232], [3, 78, 81, 234], [6, 39, 45, 234], [9, 26, 35, 234], [13, 18, 31, 234], [7, 34, 41, 238], [14, 17, 31, 238], [3, 80, 83, 240], [4, 60, 64, 240], [5, 48, 53, 240], [6, 40, 46, 240], [8, 30, 38, 240], [10, 24, 34, 240], [12, 20, 32, 240], [15, 16, 31, 240], [3, 81, 84, 243], [9, 27, 36, 243], [5, 49, 54, 245], [7, 35, 42, 245], [3, 82, 85, 246], [6, 41, 47, 246], [4, 62, 66, 248], [8, 31, 39, 248], [5, 50, 55, 250], [10, 25, 35, 250], [3, 84, 87, 252], [4, 63, 67, 252], [6, 42, 48, 252], [7, 36, 43, 252], [9, 28, 37, 252], [12, 21, 33, 252], [14, 18, 32, 252], [3, 85, 88, 255], [5, 51, 56, 255], [15, 17, 32, 255], [4, 64, 68, 256], [8, 32, 40, 256], [3, 86, 89, 258], [6, 43, 49, 258], [4, 65, 69, 260], [5, 52, 57, 260], [10, 26, 36, 260], [13, 20, 33, 260], [3, 87, 90, 261], [9, 29, 38, 261], [3, 88, 91, 264], [4, 66, 70, 264], [6, 44, 50, 264], [8, 33, 41, 264], [11, 24, 35, 264], [12, 22, 34, 264], [7, 38, 45, 266], [14, 19, 33, 266], [3, 90, 93, 270], [5, 54, 59, 270], [6, 45, 51, 270], [9, 30, 39, 270], [10, 27, 37, 270], [15, 18, 33, 270], [4, 68, 72, 272], [8, 34, 42, 272], [16, 17, 33, 272], [3, 91, 94, 273], [7, 39, 46, 273], [13, 21, 34, 273], [5, 55, 60, 275], [11, 25, 36, 275], [3, 92, 95, 276], [4, 69, 73, 276], [6, 46, 52, 276], [12, 23, 35, 276], [3, 93, 96, 279], [9, 31, 40, 279], [4, 70, 74, 280], [5, 56, 61, 280], [7, 40, 47, 280], [8, 35, 43, 280], [10, 28, 38, 280], [14, 20, 34, 280], [3, 94, 97, 282], [6, 47, 53, 282], [3, 95, 98, 285], [5, 57, 62, 285], [15, 19, 34, 285], [11, 26, 37, 286], [13, 22, 35, 286], [3, 96, 99, 288], [4, 72, 76, 288], [6, 48, 54, 288], [8, 36, 44, 288], [9, 32, 41, 288], [12, 24, 36, 288], [16, 18, 34, 288], [5, 58, 63, 290], [10, 29, 39, 290], [6, 49, 55, 294], [7, 42, 49, 294], [14, 21, 35, 294], [4, 74, 78, 296], [8, 37, 45, 296], [9, 33, 42, 297], [11, 27, 38, 297], [4, 75, 79, 300], [5, 60, 65, 300], [6, 50, 56, 300], [10, 30, 40, 300], [12, 25, 37, 300], [15, 20, 35, 300], [4, 76, 80, 304], [8, 38, 46, 304], [16, 19, 35, 304], [6, 51, 57, 306], [9, 34, 43, 306], [17, 18, 35, 306], [4, 77, 81, 308], [7, 44, 51, 308], [11, 28, 39, 308], [14, 22, 36, 308], [5, 62, 67, 310], [10, 31, 41, 310], [4, 78, 82, 312], [6, 52, 58, 312], [8, 39, 47, 312], [12, 26, 38, 312], [13, 24, 37, 312], [5, 63, 68, 315], [7, 45, 52, 315], [9, 35, 44, 315], [15, 21, 36, 315], [4, 80, 84, 320], [5, 64, 69, 320], [8, 40, 48, 320], [10, 32, 42, 320], [16, 20, 36, 320], [7, 46, 53, 322], [14, 23, 37, 322], [4, 81, 85, 324], [6, 54, 60, 324], [9, 36, 45, 324], [12, 27, 39, 324], [5, 65, 70, 325], [13, 25, 38, 325], [4, 82, 86, 328], [8, 41, 49, 328], [5, 66, 71, 330], [6, 55, 61, 330], [10, 33, 43, 330], [11, 30, 41, 330], [15, 22, 37, 330], [4, 84, 88, 336], [6, 56, 62, 336], [7, 48, 55, 336], [8, 42, 50, 336], [12, 28, 40, 336], [14, 24, 38, 336], [16, 21, 37, 336], [4, 85, 89, 340], [5, 68, 73, 340], [10, 34, 44, 340], [17, 20, 37, 340], [6, 57, 63, 342], [9, 38, 47, 342], [18, 19, 37, 342], [4, 86, 90, 344], [8, 43, 51, 344], [5, 69, 74, 345], [15, 23, 38, 345], [4, 87, 91, 348], [6, 58, 64, 348], [12, 29, 41, 348], [5, 70, 75, 350], [7, 50, 57, 350], [10, 35, 45, 350], [14, 25, 39, 350], [9, 39, 48, 351], [13, 27, 40, 351], [4, 88, 92, 352], [8, 44, 52, 352], [11, 32, 43, 352], [16, 22, 38, 352], [7, 51, 58, 357], [17, 21, 38, 357], [4, 90, 94, 360], [5, 72, 77, 360], [6, 60, 66, 360], [8, 45, 53, 360], [9, 40, 49, 360], [10, 36, 46, 360], [12, 30, 42, 360], [15, 24, 39, 360], [18, 20, 38, 360], [4, 91, 95, 364], [7, 52, 59, 364], [13, 28, 41, 364], [14, 26, 40, 364], [4, 92, 96, 368], [8, 46, 54, 368], [16, 23, 39, 368], [5, 74, 79, 370], [10, 37, 47, 370], [4, 93, 97, 372], [6, 62, 68, 372], [12, 31, 43, 372], [11, 34, 45, 374], [17, 22, 39, 374], [5, 75, 80, 375], [15, 25, 40, 375], [4, 94, 98, 376], [8, 47, 55, 376], [6, 63, 69, 378], [7, 54, 61, 378], [9, 42, 51, 378], [14, 27, 41, 378], [18, 21, 39, 378], [4, 95, 99, 380], [5, 76, 81, 380], [10, 38, 48, 380], [19, 20, 39, 380], [4, 96, 100, 384], [6, 64, 70, 384], [8, 48, 56, 384], [12, 32, 44, 384], [16, 24, 40, 384], [5, 77, 82, 385], [7, 55, 62, 385], [11, 35, 46, 385], [5, 78, 83, 390], [6, 65, 71, 390], [10, 39, 49, 390], [13, 30, 43, 390], [15, 26, 41, 390], [7, 56, 63, 392], [8, 49, 57, 392], [14, 28, 42, 392], [6, 66, 72, 396], [9, 44, 53, 396], [11, 36, 47, 396], [12, 33, 45, 396], [18, 22, 40, 396], [7, 57, 64, 399], [19, 21, 40, 399], [5, 80, 85, 400], [8, 50, 58, 400], [10, 40, 50, 400], [16, 25, 41, 400], [5, 81, 86, 405], [9, 45, 54, 405], [15, 27, 42, 405], [7, 58, 65, 406], [14, 29, 43, 406], [6, 68, 74, 408], [8, 51, 59, 408], [12, 34, 46, 408], [17, 24, 41, 408], [5, 82, 87, 410], [10, 41, 51, 410], [6, 69, 75, 414], [9, 46, 55, 414], [18, 23, 41, 414], [8, 52, 60, 416], [13, 32, 45, 416], [16, 26, 42, 416], [11, 38, 49, 418], [19, 22, 41, 418], [5, 84, 89, 420], [6, 70, 76, 420], [7, 60, 67, 420], [10, 42, 52, 420], [12, 35, 47, 420], [14, 30, 44, 420], [15, 28, 43, 420], [20, 21, 41, 420], [5, 85, 90, 425], [17, 25, 42, 425], [11, 39, 50, 429], [13, 33, 46, 429], [5, 86, 91, 430], [10, 43, 53, 430], [6, 72, 78, 432], [8, 54, 62, 432], [9, 48, 57, 432], [12, 36, 48, 432], [16, 27, 43, 432], [18, 24, 42, 432], [7, 62, 69, 434], [14, 31, 45, 434], [5, 87, 92, 435], [15, 29, 44, 435], [5, 88, 93, 440], [8, 55, 63, 440], [10, 44, 54, 440], [11, 40, 51, 440], [20, 22, 42, 440], [7, 63, 70, 441], [9, 49, 58, 441], [13, 34, 47, 442], [17, 26, 43, 442], [6, 74, 80, 444], [12, 37, 49, 444], [7, 64, 71, 448], [8, 56, 64, 448], [14, 32, 46, 448], [16, 28, 44, 448], [5, 90, 95, 450], [6, 75, 81, 450], [9, 50, 59, 450], [10, 45, 55, 450], [15, 30, 45, 450], [18, 25, 43, 450], [5, 91, 96, 455], [7, 65, 72, 455], [13, 35, 48, 455], [6, 76, 82, 456], [8, 57, 65, 456], [12, 38, 50, 456], [19, 24, 43, 456], [9, 51, 60, 459], [17, 27, 44, 459], [5, 92, 97, 460], [10, 46, 56, 460], [20, 23, 43, 460], [6, 77, 83, 462], [7, 66, 73, 462], [11, 42, 53, 462], [14, 33, 47, 462], [21, 22, 43, 462], [8, 58, 66, 464], [16, 29, 45, 464], [5, 93, 98, 465], [15, 31, 46, 465], [6, 78, 84, 468], [9, 52, 61, 468], [12, 39, 51, 468], [13, 36, 49, 468], [18, 26, 44, 468], [5, 94, 99, 470], [10, 47, 57, 470], [5, 95, 100, 475], [19, 25, 44, 475], [7, 68, 75, 476], [14, 34, 48, 476], [17, 28, 45, 476], [6, 80, 86, 480], [8, 60, 68, 480], [10, 48, 58, 480], [12, 40, 52, 480], [15, 32, 47, 480], [16, 30, 46, 480], [20, 24, 44, 480], [7, 69, 76, 483], [21, 23, 44, 483], [6, 81, 87, 486], [9, 54, 63, 486], [18, 27, 45, 486], [7, 70, 77, 490], [10, 49, 59, 490], [14, 35, 49, 490], [6, 82, 88, 492], [12, 41, 53, 492], [13, 38, 51, 494], [19, 26, 45, 494], [9, 55, 64, 495], [11, 45, 56, 495], [15, 33, 48, 495], [8, 62, 70, 496], [16, 31, 47, 496], [10, 50, 60, 500], [20, 25, 45, 500], [6, 84, 90, 504], [7, 72, 79, 504], [8, 63, 71, 504], [9, 56, 65, 504], [12, 42, 54, 504], [14, 36, 50, 504], [18, 28, 46, 504], [21, 24, 45, 504], [11, 46, 57, 506], [22, 23, 45, 506], [6, 85, 91, 510], [10, 51, 61, 510], [15, 34, 49, 510], [17, 30, 47, 510], [8, 64, 72, 512], [16, 32, 48, 512], [9, 57, 66, 513], [19, 27, 46, 513], [6, 86, 92, 516], [12, 43, 55, 516], [7, 74, 81, 518], [14, 37, 51, 518], [8, 65, 73, 520], [10, 52, 62, 520], [13, 40, 53, 520], [20, 26, 46, 520], [6, 87, 93, 522], [9, 58, 67, 522], [18, 29, 47, 522], [7, 75, 82, 525], [15, 35, 50, 525], [21, 25, 46, 525], [6, 88, 94, 528], [8, 66, 74, 528], [11, 48, 59, 528], [12, 44, 56, 528], [16, 33, 49, 528], [22, 24, 46, 528], [7, 76, 83, 532], [14, 38, 52, 532], [19, 28, 47, 532], [7, 77, 84, 539], [11, 49, 60, 539], [6, 90, 96, 540], [9, 60, 69, 540], [10, 54, 64, 540], [12, 45, 57, 540], [15, 36, 51, 540], [18, 30, 48, 540], [20, 27, 47, 540], [8, 68, 76, 544], [16, 34, 50, 544], [17, 32, 49, 544], [6, 91, 97, 546], [7, 78, 85, 546], [13, 42, 55, 546], [14, 39, 53, 546], [21, 26, 47, 546], [10, 55, 65, 550], [11, 50, 61, 550], [22, 25, 47, 550], [6, 92, 98, 552], [8, 69, 77, 552], [12, 46, 58, 552], [23, 24, 47, 552], [6, 93, 99, 558], [9, 62, 71, 558], [18, 31, 49, 558], [7, 80, 87, 560], [8, 70, 78, 560], [10, 56, 66, 560], [14, 40, 54, 560], [16, 35, 51, 560], [20, 28, 48, 560], [11, 51, 62, 561], [17, 33, 50, 561], [6, 94, 100, 564], [12, 47, 59, 564], [7, 81, 88, 567], [9, 63, 72, 567], [21, 27, 48, 567], [10, 57, 67, 570], [15, 38, 53, 570], [19, 30, 49, 570], [11, 52, 63, 572], [13, 44, 57, 572], [22, 26, 48, 572], [7, 82, 89, 574], [14, 41, 55, 574], [8, 72, 80, 576], [9, 64, 73, 576], [12, 48, 60, 576], [16, 36, 52, 576], [18, 32, 50, 576], [10, 58, 68, 580], [20, 29, 49, 580], [9, 65, 74, 585], [13, 45, 58, 585], [15, 39, 54, 585], [7, 84, 91, 588], [12, 49, 61, 588], [14, 42, 56, 588], [21, 28, 49, 588], [8, 74, 82, 592], [16, 37, 53, 592], [9, 66, 75, 594], [11, 54, 65, 594], [18, 33, 51, 594], [22, 27, 49, 594], [7, 85, 92, 595], [17, 35, 52, 595], [13, 46, 59, 598], [23, 26, 49, 598], [8, 75, 83, 600], [10, 60, 70, 600], [12, 50, 62, 600], [15, 40, 55, 600], [20, 30, 50, 600], [24, 25, 49, 600], [7, 86, 93, 602], [14, 43, 57, 602], [8, 76, 84, 608], [16, 38, 54, 608], [19, 32, 51, 608], [7, 87, 94, 609], [21, 29, 50, 609], [9, 68, 77, 612], [12, 51, 63, 612], [17, 36, 53, 612], [18, 34, 52, 612], [7, 88, 95, 616], [8, 77, 85, 616], [11, 56, 67, 616], [14, 44, 58, 616], [22, 28, 50, 616], [10, 62, 72, 620], [20, 31, 51, 620], [9, 69, 78, 621], [23, 27, 50, 621], [8, 78, 86, 624], [12, 52, 64, 624], [13, 48, 61, 624], [16, 39, 55, 624], [24, 26, 50, 624], [11, 57, 68, 627], [19, 33, 52, 627], [7, 90, 97, 630], [9, 70, 79, 630], [10, 63, 73, 630], [14, 45, 59, 630], [15, 42, 57, 630], [18, 35, 53, 630], [21, 30, 51, 630], [7, 91, 98, 637], [13, 49, 62, 637], [11, 58, 69, 638], [22, 29, 51, 638], [8, 80, 88, 640], [10, 64, 74, 640], [16, 40, 56, 640], [20, 32, 52, 640], [7, 92, 99, 644], [14, 46, 60, 644], [23, 28, 51, 644], [17, 38, 55, 646], [19, 34, 53, 646], [8, 81, 89, 648], [9, 72, 81, 648], [12, 54, 66, 648], [18, 36, 54, 648], [24, 27, 51, 648], [10, 65, 75, 650], [13, 50, 63, 650], [25, 26, 51, 650], [7, 93, 100, 651], [21, 31, 52, 651], [8, 82, 90, 656], [16, 41, 57, 656], [10, 66, 76, 660], [11, 60, 71, 660], [12, 55, 67, 660], [15, 44, 59, 660], [20, 33, 53, 660], [22, 30, 52, 660], [13, 51, 64, 663], [17, 39, 56, 663], [9, 74, 83, 666], [18, 37, 55, 666], [8, 84, 92, 672], [12, 56, 68, 672], [14, 48, 62, 672], [16, 42, 58, 672], [21, 32, 53, 672], [24, 28, 52, 672], [9, 75, 84, 675], [15, 45, 60, 675], [25, 27, 52, 675], [8, 85, 93, 680], [10, 68, 78, 680], [17, 40, 57, 680], [20, 34, 54, 680], [11, 62, 73, 682], [22, 31, 53, 682], [9, 76, 85, 684], [12, 57, 69, 684], [18, 38, 56, 684], [19, 36, 55, 684], [8, 86, 94, 688], [16, 43, 59, 688], [10, 69, 79, 690], [15, 46, 61, 690], [23, 30, 53, 690], [9, 77, 86, 693], [11, 63, 74, 693], [21, 33, 54, 693], [8, 87, 95, 696], [12, 58, 70, 696], [24, 29, 53, 696], [10, 70, 80, 700], [14, 50, 64, 700], [20, 35, 55, 700], [25, 28, 53, 700], [9, 78, 87, 702], [13, 54, 67, 702], [18, 39, 57, 702], [26, 27, 53, 702], [8, 88, 96, 704], [11, 64, 75, 704], [16, 44, 60, 704], [22, 32, 54, 704], [14, 51, 65, 714], [17, 42, 59, 714], [21, 34, 55, 714], [11, 65, 76, 715], [13, 55, 68, 715], [8, 90, 98, 720], [9, 80, 89, 720], [10, 72, 82, 720], [12, 60, 72, 720], [15, 48, 63, 720], [16, 45, 61, 720], [18, 40, 58, 720], [20, 36, 56, 720], [24, 30, 54, 720], [11, 66, 77, 726], [22, 33, 55, 726], [8, 91, 99, 728], [13, 56, 69, 728], [14, 52, 66, 728], [26, 28, 54, 728], [15, 49, 64, 735], [21, 35, 56, 735], [8, 92, 100, 736], [16, 46, 62, 736], [23, 32, 55, 736], [9, 82, 91, 738], [18, 41, 59, 738], [10, 74, 84, 740], [20, 37, 57, 740], [13, 57, 70, 741], [19, 39, 58, 741], [12, 62, 74, 744], [24, 31, 55, 744], [11, 68, 79, 748], [17, 44, 61, 748], [22, 34, 56, 748], [10, 75, 85, 750], [15, 50, 65, 750], [25, 30, 55, 750], [13, 58, 71, 754], [26, 29, 55, 754], [9, 84, 93, 756], [12, 63, 75, 756], [14, 54, 68, 756], [18, 42, 60, 756], [21, 36, 57, 756], [27, 28, 55, 756], [11, 69, 80, 759], [23, 33, 56, 759], [10, 76, 86, 760], [19, 40, 59, 760], [20, 38, 58, 760], [9, 85, 94, 765], [15, 51, 66, 765], [17, 45, 62, 765], [12, 64, 76, 768], [16, 48, 64, 768], [24, 32, 56, 768], [10, 77, 87, 770], [11, 70, 81, 770], [14, 55, 69, 770], [22, 35, 57, 770], [9, 86, 95, 774], [18, 43, 61, 774], [10, 78, 88, 780], [12, 65, 77, 780], [13, 60, 73, 780], [15, 52, 67, 780], [20, 39, 59, 780], [26, 30, 56, 780], [17, 46, 63, 782], [23, 34, 57, 782], [9, 87, 96, 783], [27, 29, 56, 783], [14, 56, 70, 784], [16, 49, 65, 784], [9, 88, 97, 792], [11, 72, 83, 792], [12, 66, 78, 792], [18, 44, 62, 792], [22, 36, 58, 792], [24, 33, 57, 792], [14, 57, 71, 798], [19, 42, 61, 798], [21, 38, 59, 798], [10, 80, 90, 800], [16, 50, 66, 800], [20, 40, 60, 800], [25, 32, 57, 800], [13, 62, 75, 806], [26, 31, 57, 806], [9, 90, 99, 810], [10, 81, 91, 810], [15, 54, 69, 810], [18, 45, 63, 810], [27, 30, 57, 810], [14, 58, 72, 812], [28, 29, 57, 812], [11, 74, 85, 814], [22, 37, 59, 814], [12, 68, 80, 816], [16, 51, 67, 816], [17, 48, 65, 816], [24, 34, 58, 816], [9, 91, 100, 819], [13, 63, 76, 819], [21, 39, 60, 819], [10, 82, 92, 820], [20, 41, 61, 820], [11, 75, 86, 825], [15, 55, 70, 825], [25, 33, 58, 825], [12, 69, 81, 828], [18, 46, 64, 828], [23, 36, 59, 828], [13, 64, 77, 832], [16, 52, 68, 832], [26, 32, 58, 832], [11, 76, 87, 836], [19, 44, 63, 836], [22, 38, 60, 836], [10, 84, 94, 840], [12, 70, 82, 840], [14, 60, 74, 840], [15, 56, 71, 840], [20, 42, 62, 840], [21, 40, 61, 840], [24, 35, 59, 840], [28, 30, 58, 840], [10, 85, 95, 850], [17, 50, 67, 850], [25, 34, 59, 850], [15, 57, 72, 855], [19, 45, 64, 855], [11, 78, 89, 858], [13, 66, 79, 858], [22, 39, 61, 858], [26, 33, 59, 858], [10, 86, 96, 860], [20, 43, 63, 860], [12, 72, 84, 864], [16, 54, 70, 864], [18, 48, 66, 864], [24, 36, 60, 864], [27, 32, 59, 864], [14, 62, 76, 868], [28, 31, 59, 868], [10, 87, 97, 870], [15, 58, 73, 870], [29, 30, 59, 870], [19, 46, 65, 874], [23, 38, 61, 874], [10, 88, 98, 880], [11, 80, 91, 880], [16, 55, 71, 880], [20, 44, 64, 880], [22, 40, 62, 880], [14, 63, 77, 882], [18, 49, 67, 882], [21, 42, 63, 882], [13, 68, 81, 884], [17, 52, 69, 884], [26, 34, 60, 884], [12, 74, 86, 888], [24, 37, 61, 888], [11, 81, 92, 891], [27, 33, 60, 891], [14, 64, 78, 896], [16, 56, 72, 896], [28, 32, 60, 896], [13, 69, 82, 897], [23, 39, 62, 897], [10, 90, 100, 900], [12, 75, 87, 900], [15, 60, 75, 900], [18, 50, 68, 900], [20, 45, 65, 900], [25, 36, 61, 900], [11, 82, 93, 902], [22, 41, 63, 902], [13, 70, 83, 910], [14, 65, 79, 910], [26, 35, 61, 910], [12, 76, 88, 912], [16, 57, 73, 912], [19, 48, 67, 912], [24, 38, 62, 912], [17, 54, 71, 918], [18, 51, 69, 918], [27, 34, 61, 918], [20, 46, 66, 920], [23, 40, 63, 920], [11, 84, 95, 924], [12, 77, 89, 924], [14, 66, 80, 924], [21, 44, 65, 924], [22, 42, 64, 924], [28, 33, 61, 924], [16, 58, 74, 928], [29, 32, 61, 928], [15, 62, 77, 930], [30, 31, 61, 930], [11, 85, 96, 935], [17, 55, 72, 935], [12, 78, 90, 936], [13, 72, 85, 936], [18, 52, 70, 936], [24, 39, 63, 936], [26, 36, 62, 936], [15, 63, 78, 945], [21, 45, 66, 945], [27, 35, 62, 945], [11, 86, 97, 946], [22, 43, 65, 946], [19, 50, 69, 950], [25, 38, 63, 950], [14, 68, 82, 952], [17, 56, 73, 952], [28, 34, 62, 952], [11, 87, 98, 957], [29, 33, 62, 957], [12, 80, 92, 960], [15, 64, 79, 960], [16, 60, 76, 960], [20, 48, 68, 960], [24, 40, 64, 960], [30, 32, 62, 960], [13, 74, 87, 962], [26, 37, 63, 962], [14, 69, 83, 966], [21, 46, 67, 966], [23, 42, 65, 966], [11, 88, 99, 968], [22, 44, 66, 968], [17, 57, 74, 969], [19, 51, 70, 969], [12, 81, 93, 972], [18, 54, 72, 972], [27, 36, 63, 972], [13, 75, 88, 975], [15, 65, 80, 975], [25, 39, 64, 975], [14, 70, 84, 980], [20, 49, 69, 980], [28, 35, 63, 980], [12, 82, 94, 984], [24, 41, 65, 984], [17, 58, 75, 986], [29, 34, 63, 986], [13, 76, 89, 988], [19, 52, 71, 988], [26, 38, 64, 988], [15, 66, 81, 990], [18, 55, 73, 990], [22, 45, 67, 990], [30, 33, 63, 990], [16, 62, 78, 992], [31, 32, 63, 992], [20, 50, 70, 1000], [25, 40, 65, 1000], [12, 84, 96, 1008], [14, 72, 86, 1008], [16, 63, 79, 1008], [18, 56, 74, 1008], [21, 48, 69, 1008], [24, 42, 66, 1008], [28, 36, 64, 1008], [22, 46, 68, 1012], [23, 44, 67, 1012], [13, 78, 91, 1014], [26, 39, 65, 1014], [12, 85, 97, 1020], [15, 68, 83, 1020], [17, 60, 77, 1020], [20, 51, 71, 1020], [30, 34, 64, 1020], [18, 57, 75, 1026], [19, 54, 73, 1026], [27, 38, 65, 1026], [12, 86, 98, 1032], [24, 43, 67, 1032], [15, 69, 84, 1035], [23, 45, 68, 1035], [14, 74, 88, 1036], [28, 37, 65, 1036], [13, 80, 93, 1040], [16, 65, 81, 1040], [20, 52, 72, 1040], [26, 40, 66, 1040], [12, 87, 99, 1044], [18, 58, 76, 1044], [29, 36, 65, 1044], [14, 75, 89, 1050], [15, 70, 85, 1050], [21, 50, 71, 1050], [25, 42, 67, 1050], [30, 35, 65, 1050], [13, 81, 94, 1053], [27, 39, 66, 1053], [17, 62, 79, 1054], [31, 34, 65, 1054], [12, 88, 100, 1056], [16, 66, 82, 1056], [22, 48, 70, 1056], [24, 44, 68, 1056], [32, 33, 65, 1056], [14, 76, 90, 1064], [19, 56, 75, 1064], [28, 38, 66, 1064], [13, 82, 95, 1066], [26, 41, 67, 1066], [17, 63, 80, 1071], [21, 51, 72, 1071], [14, 77, 91, 1078], [22, 49, 71, 1078], [15, 72, 87, 1080], [18, 60, 78, 1080], [20, 54, 74, 1080], [24, 45, 69, 1080], [27, 40, 67, 1080], [30, 36, 66, 1080], [16, 68, 84, 1088], [17, 64, 81, 1088], [32, 34, 66, 1088], [13, 84, 97, 1092], [14, 78, 92, 1092], [21, 52, 73, 1092], [26, 42, 68, 1092], [28, 39, 67, 1092], [20, 55, 75, 1100], [22, 50, 72, 1100], [25, 44, 69, 1100], [19, 58, 77, 1102], [29, 38, 67, 1102], [16, 69, 85, 1104], [23, 48, 71, 1104], [24, 46, 70, 1104], [13, 85, 98, 1105], [17, 65, 82, 1105], [15, 74, 89, 1110], [30, 37, 67, 1110], [18, 62, 80, 1116], [31, 36, 67, 1116], [13, 86, 99, 1118], [26, 43, 69, 1118], [14, 80, 94, 1120], [16, 70, 86, 1120], [20, 56, 76, 1120], [28, 40, 68, 1120], [32, 35, 67, 1120], [17, 66, 83, 1122], [22, 51, 73, 1122], [33, 34, 67, 1122], [15, 75, 90, 1125], [25, 45, 70, 1125], [13, 87, 100, 1131], [29, 39, 68, 1131], [14, 81, 95, 1134], [18, 63, 81, 1134], [21, 54, 75, 1134], [27, 42, 69, 1134], [15, 76, 91, 1140], [19, 60, 79, 1140], [20, 57, 77, 1140], [30, 38, 68, 1140], [22, 52, 74, 1144], [26, 44, 70, 1144], [14, 82, 96, 1148], [28, 41, 69, 1148], [23, 50, 73, 1150], [25, 46, 71, 1150], [16, 72, 88, 1152], [18, 64, 82, 1152], [24, 48, 72, 1152], [32, 36, 68, 1152], [15, 77, 92, 1155], [21, 55, 76, 1155], [33, 35, 68, 1155], [20, 58, 78, 1160], [29, 40, 69, 1160], [15, 78, 93, 1170], [18, 65, 83, 1170], [26, 45, 71, 1170], [30, 39, 69, 1170], [17, 69, 86, 1173], [23, 51, 74, 1173], [14, 84, 98, 1176], [21, 56, 77, 1176], [24, 49, 73, 1176], [28, 42, 70, 1176], [19, 62, 81, 1178], [31, 38, 69, 1178], [16, 74, 90, 1184], [32, 37, 69, 1184], [18, 66, 84, 1188], [22, 54, 76, 1188], [27, 44, 71, 1188], [33, 36, 69, 1188], [14, 85, 99, 1190], [17, 70, 87, 1190], [34, 35, 69, 1190], [23, 52, 75, 1196], [26, 46, 72, 1196], [19, 63, 82, 1197], [21, 57, 78, 1197], [15, 80, 95, 1200], [16, 75, 91, 1200], [20, 60, 80, 1200], [24, 50, 74, 1200], [25, 48, 73, 1200], [30, 40, 70, 1200], [14, 86, 100, 1204], [28, 43, 71, 1204], [15, 81, 96, 1215], [27, 45, 72, 1215], [16, 76, 92, 1216], [19, 64, 83, 1216], [32, 38, 70, 1216], [21, 58, 79, 1218], [29, 42, 71, 1218], [17, 72, 89, 1224], [18, 68, 86, 1224], [24, 51, 75, 1224], [34, 36, 70, 1224], [15, 82, 97, 1230], [30, 41, 71, 1230], [16, 77, 93, 1232], [22, 56, 78, 1232], [28, 44, 72, 1232], [20, 62, 82, 1240], [31, 40, 71, 1240], [18, 69, 87, 1242], [23, 54, 77, 1242], [27, 46, 73, 1242], [16, 78, 94, 1248], [24, 52, 76, 1248], [26, 48, 74, 1248], [32, 39, 71, 1248], [19, 66, 85, 1254], [22, 57, 79, 1254], [33, 38, 71, 1254], [17, 74, 91, 1258], [34, 37, 71, 1258], [15, 84, 99, 1260], [18, 70, 88, 1260], [20, 63, 83, 1260], [21, 60, 81, 1260], [28, 45, 73, 1260], [30, 42, 72, 1260], [35, 36, 71, 1260], [15, 85, 100, 1275], [17, 75, 92, 1275], [25, 51, 76, 1275], [22, 58, 80, 1276], [29, 44, 73, 1276], [16, 80, 96, 1280], [20, 64, 84, 1280], [32, 40, 72, 1280], [23, 56, 79, 1288], [28, 46, 74, 1288], [17, 76, 93, 1292], [19, 68, 87, 1292], [34, 38, 72, 1292], [16, 81, 97, 1296], [18, 72, 90, 1296], [24, 54, 78, 1296], [27, 48, 75, 1296], [20, 65, 85, 1300], [25, 52, 77, 1300], [26, 50, 76, 1300], [21, 62, 83, 1302], [31, 42, 73, 1302], [19, 69, 88, 1311], [23, 57, 80, 1311], [16, 82, 98, 1312], [32, 41, 73, 1312], [20, 66, 86, 1320], [22, 60, 82, 1320], [24, 55, 79, 1320], [30, 44, 74, 1320], [33, 40, 73, 1320], [21, 63, 84, 1323], [27, 49, 76, 1323], [17, 78, 95, 1326], [26, 51, 77, 1326], [34, 39, 73, 1326], [19, 70, 89, 1330], [35, 38, 73, 1330], [18, 74, 92, 1332], [36, 37, 73, 1332], [23, 58, 81, 1334], [29, 46, 75, 1334], [16, 84, 100, 1344], [21, 64, 85, 1344], [24, 56, 80, 1344], [28, 48, 76, 1344], [32, 42, 74, 1344], [18, 75, 93, 1350], [25, 54, 79, 1350], [27, 50, 77, 1350], [30, 45, 75, 1350], [17, 80, 97, 1360], [20, 68, 88, 1360], [34, 40, 74, 1360], [22, 62, 84, 1364], [31, 44, 75, 1364], [21, 65, 86, 1365], [35, 39, 74, 1365], [18, 76, 94, 1368], [19, 72, 91, 1368], [24, 57, 81, 1368], [36, 38, 74, 1368], [17, 81, 98, 1377], [27, 51, 78, 1377], [20, 69, 89, 1380], [23, 60, 83, 1380], [30, 46, 76, 1380], [18, 77, 95, 1386], [21, 66, 87, 1386], [22, 63, 85, 1386], [33, 42, 75, 1386], [24, 58, 82, 1392], [29, 48, 77, 1392], [17, 82, 99, 1394], [34, 41, 75, 1394], [20, 70, 90, 1400], [25, 56, 81, 1400], [28, 50, 78, 1400], [35, 40, 75, 1400], [18, 78, 96, 1404], [26, 54, 80, 1404], [27, 52, 79, 1404], [36, 39, 75, 1404], [19, 74, 93, 1406], [37, 38, 75, 1406], [22, 64, 86, 1408], [32, 44, 76, 1408], [19, 75, 94, 1425], [25, 57, 82, 1425], [23, 62, 85, 1426], [31, 46, 77, 1426], [21, 68, 89, 1428], [28, 51, 79, 1428], [34, 42, 76, 1428], [22, 65, 87, 1430], [26, 55, 81, 1430], [18, 80, 98, 1440], [20, 72, 92, 1440], [24, 60, 84, 1440], [30, 48, 78, 1440], [32, 45, 77, 1440], [36, 40, 76, 1440], [21, 69, 90, 1449], [23, 63, 86, 1449], [25, 58, 83, 1450], [29, 50, 79, 1450], [22, 66, 88, 1452], [33, 44, 77, 1452], [26, 56, 82, 1456], [28, 52, 80, 1456], [18, 81, 99, 1458], [27, 54, 81, 1458], [21, 70, 91, 1470], [30, 49, 79, 1470], [35, 42, 77, 1470], [23, 64, 87, 1472], [32, 46, 78, 1472], [18, 82, 100, 1476], [36, 41, 77, 1476], [20, 74, 94, 1480], [37, 40, 77, 1480], [19, 78, 97, 1482], [26, 57, 83, 1482], [38, 39, 77, 1482], [27, 55, 82, 1485], [33, 45, 78, 1485], [24, 62, 86, 1488], [31, 48, 79, 1488], [22, 68, 90, 1496], [34, 44, 78, 1496], [20, 75, 95, 1500], [25, 60, 85, 1500], [30, 50, 80, 1500], [26, 58, 84, 1508], [29, 52, 81, 1508], [21, 72, 93, 1512], [24, 63, 87, 1512], [27, 56, 83, 1512], [28, 54, 82, 1512], [36, 42, 78, 1512], [22, 69, 91, 1518], [23, 66, 89, 1518], [33, 46, 79, 1518], [19, 80, 99, 1520], [20, 76, 96, 1520], [38, 40, 78, 1520], [30, 51, 81, 1530], [34, 45, 79, 1530], [24, 64, 88, 1536], [32, 48, 80, 1536], [19, 81, 100, 1539], [27, 57, 84, 1539], [20, 77, 97, 1540], [22, 70, 92, 1540], [28, 55, 83, 1540], [35, 44, 79, 1540], [25, 62, 87, 1550], [31, 50, 81, 1550], [21, 74, 95, 1554], [37, 42, 79, 1554], [20, 78, 98, 1560], [24, 65, 89, 1560], [26, 60, 86, 1560], [30, 52, 82, 1560], [39, 40, 79, 1560], [23, 68, 91, 1564], [34, 46, 80, 1564], [27, 58, 85, 1566], [29, 54, 83, 1566], [28, 56, 84, 1568], [32, 49, 81, 1568], [21, 75, 96, 1575], [25, 63, 88, 1575], [35, 45, 80, 1575], [22, 72, 94, 1584], [24, 66, 90, 1584], [33, 48, 81, 1584], [36, 44, 80, 1584], [21, 76, 97, 1596], [28, 57, 85, 1596], [38, 42, 80, 1596], [20, 80, 100, 1600], [25, 64, 89, 1600], [32, 50, 82, 1600], [23, 70, 93, 1610], [35, 46, 81, 1610], [26, 62, 88, 1612], [31, 52, 83, 1612], [21, 77, 98, 1617], [33, 49, 82, 1617], [27, 60, 87, 1620], [30, 54, 84, 1620], [36, 45, 81, 1620], [28, 58, 86, 1624], [29, 56, 85, 1624], [22, 74, 96, 1628], [37, 44, 81, 1628], [24, 68, 92, 1632], [32, 51, 83, 1632], [34, 48, 82, 1632], [21, 78, 99, 1638], [26, 63, 89, 1638], [39, 42, 81, 1638], [22, 75, 97, 1650], [25, 66, 91, 1650], [30, 55, 85, 1650], [33, 50, 83, 1650], [23, 72, 95, 1656], [24, 69, 93, 1656], [36, 46, 82, 1656], [26, 64, 90, 1664], [32, 52, 84, 1664], [22, 76, 98, 1672], [38, 44, 82, 1672], [27, 62, 89, 1674], [31, 54, 85, 1674], [24, 70, 94, 1680], [28, 60, 88, 1680], [30, 56, 86, 1680], [35, 48, 83, 1680], [40, 42, 82, 1680], [25, 68, 93, 1700], [34, 50, 84, 1700], [23, 74, 97, 1702], [37, 46, 83, 1702], [30, 57, 87, 1710], [38, 45, 83, 1710], [22, 78, 100, 1716], [26, 66, 92, 1716], [33, 52, 85, 1716], [39, 44, 83, 1716], [23, 75, 98, 1725], [25, 69, 94, 1725], [24, 72, 96, 1728], [27, 64, 91, 1728], [32, 54, 86, 1728], [36, 48, 84, 1728], [28, 62, 90, 1736], [31, 56, 87, 1736], [29, 60, 89, 1740], [30, 58, 88, 1740], [23, 76, 99, 1748], [38, 46, 84, 1748], [25, 70, 95, 1750], [35, 50, 85, 1750], [27, 65, 92, 1755], [39, 45, 84, 1755], [32, 55, 87, 1760], [40, 44, 84, 1760], [28, 63, 91, 1764], [36, 49, 85, 1764], [26, 68, 94, 1768], [34, 52, 86, 1768], [24, 74, 98, 1776], [37, 48, 85, 1776], [27, 66, 93, 1782], [33, 54, 87, 1782], [28, 64, 92, 1792], [32, 56, 88, 1792], [26, 69, 95, 1794], [39, 46, 85, 1794], [29, 62, 91, 1798], [31, 58, 89, 1798], [24, 75, 99, 1800], [25, 72, 97, 1800], [30, 60, 90, 1800], [36, 50, 86, 1800], [40, 45, 85, 1800], [26, 70, 96, 1820], [28, 65, 93, 1820], [35, 52, 87, 1820], [24, 76, 100, 1824], [32, 57, 89, 1824], [38, 48, 86, 1824], [27, 68, 95, 1836], [34, 54, 88, 1836], [36, 51, 87, 1836], [28, 66, 94, 1848], [33, 56, 89, 1848], [42, 44, 86, 1848], [25, 74, 99, 1850], [37, 50, 87, 1850], [29, 64, 93, 1856], [32, 58, 90, 1856], [30, 62, 92, 1860], [31, 60, 91, 1860], [26, 72, 98, 1872], [36, 52, 88, 1872], [39, 48, 87, 1872], [27, 70, 97, 1890], [30, 63, 93, 1890], [35, 54, 89, 1890], [42, 45, 87, 1890], [28, 68, 96, 1904], [34, 56, 90, 1904], [29, 66, 95, 1914], [33, 58, 91, 1914], [30, 64, 94, 1920], [32, 60, 92, 1920], [40, 48, 88, 1920], [26, 74, 100, 1924], [37, 52, 89, 1924], [28, 69, 97, 1932], [42, 46, 88, 1932], [34, 57, 91, 1938], [38, 51, 89, 1938], [27, 72, 99, 1944], [36, 54, 90, 1944], [30, 65, 95, 1950], [39, 50, 89, 1950], [28, 70, 98, 1960], [35, 56, 91, 1960], [40, 49, 89, 1960], [29, 68, 97, 1972], [34, 58, 92, 1972], [30, 66, 96, 1980], [33, 60, 93, 1980], [36, 55, 91, 1980], [44, 45, 89, 1980], [31, 64, 95, 1984], [32, 62, 94, 1984], [28, 72, 100, 2016], [32, 63, 95, 2016], [36, 56, 92, 2016], [42, 48, 90, 2016], [29, 70, 99, 2030], [35, 58, 93, 2030], [30, 68, 98, 2040], [34, 60, 94, 2040], [40, 51, 91, 2040], [31, 66, 97, 2046], [33, 62, 95, 2046], [36, 57, 93, 2052], [38, 54, 92, 2052], [30, 69, 99, 2070], [45, 46, 91, 2070], [32, 65, 97, 2080], [40, 52, 92, 2080], [30, 70, 100, 2100], [35, 60, 95, 2100], [42, 50, 92, 2100], [31, 68, 99, 2108], [34, 62, 96, 2108], [32, 66, 98, 2112], [33, 64, 97, 2112], [44, 48, 92, 2112], [34, 63, 97, 2142], [42, 51, 93, 2142], [33, 65, 98, 2145], [39, 55, 94, 2145], [36, 60, 96, 2160], [40, 54, 94, 2160], [45, 48, 93, 2160], [32, 68, 100, 2176], [34, 64, 98, 2176], [39, 56, 95, 2184], [42, 52, 94, 2184], [40, 55, 95, 2200], [44, 50, 94, 2200], [35, 63, 98, 2205], [45, 49, 94, 2205], [35, 64, 99, 2240], [40, 56, 96, 2240], [34, 66, 100, 2244], [44, 51, 95, 2244], [36, 63, 99, 2268], [42, 54, 96, 2268], [38, 60, 98, 2280], [40, 57, 97, 2280], [39, 60, 99, 2340], [45, 52, 97, 2340], [42, 56, 98, 2352], [48, 49, 97, 2352], [40, 60, 100, 2400], [48, 50, 98, 2400]] .

?- time(s2(Q,100)).
% 306,051 inferences, 0.080 CPU in 0.103 seconds (78% CPU, 3818716 Lips)
Q = [[2, 9, 11, 18], [3, 8, 11, 24], [4, 7, 11, 28], [2, 15, 17, 30], [5, 6, 11, 30], [2, 21, 23, 42], [3, 14, 17, 42], [2, 25, 27, 50], [4, 13, 17, 52], [2, 27, 29, 54], [3, 20, 23, 60], [5, 12, 17, 60], [2, 33, 35, 66], [6, 11, 17, 66], [2, 35, 37, 70], [7, 10, 17, 70], [3, 24, 27, 72], [8, 9, 17, 72], [4, 19, 23, 76], [2, 39, 41, 78], [3, 26, 29, 78], [2, 45, 47, 90], [5, 18, 23, 90], [4, 23, 27, 92], [3, 32, 35, 96], [4, 25, 29, 100], [2, 51, 53, 102], [3, 34, 37, 102], [6, 17, 23, 102], [5, 22, 27, 110], [7, 16, 23, 112], [3, 38, 41, 114], [5, 24, 29, 120], [8, 15, 23, 120], [4, 31, 35, 124], [6, 21, 27, 126], [9, 14, 23, 126], [10, 13, 23, 130], [3, 44, 47, 132], [4, 33, 37, 132], [11, 12, 23, 132], [6, 23, 29, 138], [7, 20, 27, 140], [4, 37, 41, 148], [3, 50, 53, 150], [5, 30, 35, 150], [8, 19, 27, 152], [7, 22, 29, 154], [5, 32, 37, 160], [9, 18, 27, 162], [8, 21, 29, 168], [10, 17, 27, 170], [4, 43, 47, 172], [6, 29, 35, 174], [11, 16, 27, 176], [5, 36, 41, 180], [9, 20, 29, 180], [12, 15, 27, 180], [13, 14, 27, 182], [6, 31, 37, 186], [10, 19, 29, 190], [4, 49, 53, 196], [7, 28, 35, 196], [11, 18, 29, 198], [12, 17, 29, 204], [13, 16, 29, 208], [5, 42, 47, 210], [6, 35, 41, 210], [7, 30, 37, 210], [14, 15, 29, 210], [8, 27, 35, 216], [8, 29, 37, 232], [9, 26, 35, 234], [7, 34, 41, 238], [5, 48, 53, 240], [6, 41, 47, 246], [10, 25, 35, 250], [9, 28, 37, 252], [8, 33, 41, 264], [11, 24, 35, 264], [10, 27, 37, 270], [12, 23, 35, 276], [7, 40, 47, 280], [6, 47, 53, 282], [11, 26, 37, 286], [13, 22, 35, 286], [9, 32, 41, 288], [14, 21, 35, 294], [12, 25, 37, 300], [15, 20, 35, 300], [16, 19, 35, 304], [17, 18, 35, 306], [10, 31, 41, 310], [8, 39, 47, 312], [13, 24, 37, 312], [7, 46, 53, 322], [14, 23, 37, 322], [11, 30, 41, 330], [15, 22, 37, 330], [16, 21, 37, 336], [17, 20, 37, 340], [9, 38, 47, 342], [18, 19, 37, 342], [12, 29, 41, 348], [8, 45, 53, 360], [13, 28, 41, 364], [10, 37, 47, 370], [14, 27, 41, 378], [15, 26, 41, 390], [9, 44, 53, 396], [11, 36, 47, 396], [16, 25, 41, 400], [17, 24, 41, 408], [18, 23, 41, 414], [19, 22, 41, 418], [12, 35, 47, 420], [20, 21, 41, 420], [10, 43, 53, 430], [13, 34, 47, 442], [11, 42, 53, 462], [14, 33, 47, 462], [15, 32, 47, 480], [12, 41, 53, 492], [16, 31, 47, 496], [17, 30, 47, 510], [13, 40, 53, 520], [18, 29, 47, 522], [19, 28, 47, 532], [20, 27, 47, 540], [14, 39, 53, 546], [21, 26, 47, 546], [22, 25, 47, 550], [23, 24, 47, 552], [15, 38, 53, 570], [16, 37, 53, 592], [17, 36, 53, 612], [18, 35, 53, 630], [19, 34, 53, 646], [20, 33, 53, 660], [21, 32, 53, 672], [22, 31, 53, 682], [23, 30, 53, 690], [24, 29, 53, 696], [25, 28, 53, 700], [26, 27, 53, 702]].

?- time(s3(Q,100)).
% 306,202 inferences, 0.082 CPU in 0.104 seconds (78% CPU, 3754546 Lips)
Q = [[2, 9, 11, 18], [3, 8, 11, 24], [4, 7, 11, 28], [2, 25, 27, 50], [4, 13, 17, 52], [2, 27, 29, 54], [4, 19, 23, 76], [4, 23, 27, 92], [3, 32, 35, 96], [4, 25, 29, 100], [5, 22, 27, 110], [7, 16, 23, 112], [3, 38, 41, 114], [4, 31, 35, 124], [10, 13, 23, 130], [6, 23, 29, 138], [7, 20, 27, 140], [4, 37, 41, 148], [8, 19, 27, 152], [7, 22, 29, 154], [5, 32, 37, 160], [9, 18, 27, 162], [8, 21, 29, 168], [10, 17, 27, 170], [4, 43, 47, 172], [6, 29, 35, 174], [11, 16, 27, 176], [13, 14, 27, 182], [6, 31, 37, 186], [10, 19, 29, 190], [11, 18, 29, 198], [12, 17, 29, 204], [13, 16, 29, 208], [8, 27, 35, 216], [8, 29, 37, 232], [9, 26, 35, 234], [7, 34, 41, 238], [5, 48, 53, 240], [6, 41, 47, 246], [10, 25, 35, 250], [9, 28, 37, 252], [10, 27, 37, 270], [12, 23, 35, 276], [7, 40, 47, 280], [6, 47, 53, 282], [9, 32, 41, 288], [14, 21, 35, 294], [16, 19, 35, 304], [17, 18, 35, 306], [10, 31, 41, 310], [16, 21, 37, 336], [17, 20, 37, 340], [12, 29, 41, 348], [8, 45, 53, 360], [13, 28, 41, 364], [10, 37, 47, 370], [14, 27, 41, 378], [15, 26, 41, 390], [16, 25, 41, 400], [17, 24, 41, 408], [18, 23, 41, 414], [19, 22, 41, 418], [10, 43, 53, 430], [13, 34, 47, 442], [15, 32, 47, 480], [12, 41, 53, 492], [16, 31, 47, 496], [17, 30, 47, 510], [13, 40, 53, 520], [18, 29, 47, 522], [19, 28, 47, 532], [20, 27, 47, 540], [22, 25, 47, 550], [23, 24, 47, 552], [15, 38, 53, 570], [16, 37, 53, 592], [17, 36, 53, 612], [18, 35, 53, 630], [19, 34, 53, 646], [20, 33, 53, 660], [21, 32, 53, 672], [22, 31, 53, 682], [23, 30, 53, 690], [24, 29, 53, 696], [25, 28, 53, 700], [26, 27, 53, 702]].

?- time(s4(Q,100)).
% 22,665 inferences, 0.005 CPU in 0.005 seconds (99% CPU, 4466010 Lips)
Q = [[4, 13, 17, 52]].

?- time(s4(Q,500)).
% 719,993 inferences, 0.092 CPU in 0.094 seconds (98% CPU, 7810390 Lips)
Q = [[4, 13, 17, 52]].
*/
